// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_tprotected_fs.edl" import *;

    // This header is generated during the build of enclave-ffi-types
    include "../ffi-types/enclave-ffi-types.h"

    trusted {
        /* define ECALLs here. */

        EnclaveBuffer ecall_allocate(
            [in, count=length] const uint8_t* buffer,
            uintptr_t length
        );

        public sgx_status_t perform_test(
            Ctx context
        );
    };

    untrusted {
        UserSpaceBuffer ocall_allocate(
            [in, count=length] const uint8_t* buffer,
            uintptr_t length
        );

        OcallReturn ocall_db_get(
            Ctx context,
            [out] EnclaveBuffer* value,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len
        ) allow (ecall_allocate);

        OcallReturn ocall_db_delete(
            Ctx context,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len
        );

        OcallReturn ocall_db_put(
            Ctx context,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len,
            [in, count=value_len] const uint8_t* value,
            uintptr_t value_len
        );

        OcallReturn ocall_db_flush(
            Ctx context
        );
    };
};
